{$IFNDEF WASPLIB_OSRS} {$I WaspLib/osrs.simba} {$ENDIF}

{$include_once combat_types.simba}
{$include_once game_state.simba}
{$include_once consumables.simba}
{$include_once gear.simba}

function EdgeWeightedRandom(samples, minVal, maxVal: Integer): Integer;
var
  i, candidate, bestCandidate: Integer;
begin
  bestCandidate := Random(minVal, maxVal + 1);

  for i := 2 to samples do
  begin
    candidate := Random(minVal, maxVal + 1);
    if Abs(candidate) > Abs(bestCandidate) then
      bestCandidate := candidate;
  end;

  Result := bestCandidate;
end;

type

  //IMPORTANT!! Declared in order of action priority.
  ETDCombatAction = (
    NONE,
    DODGE_SNARE,
    SWAP_PRAYER,
    HEAL,
    RESTORE_PRAYER,
    CONSUME_BOOST,
    SWAP_GEAR,
    STEP_AWAY,
    ATTACK,
    BEGIN_FIGHT,
    END_KILL,
    OPEN_INVENTORY,
    OPEN_PRAYER,
    OPEN_MAGIC
  );

  TTDCombatActionSet = set of ETDCombatAction;

procedure TTDCombatActionSet.Add(action: ETDCombatAction); begin
  Self := Self + action;
end;

procedure TTDCombatActionSet.Add(actions: TTDCombatActionSet); overload; begin
  Self := Self + actions;
end;

procedure TTDCombatActionSet.Remove(action: ETDCombatAction); begin
  Self := Self - [action];
end;

function TTDCombatActionSet.Contains(action: ETDCombatAction): Boolean; begin
  Result := action in Self;
end;

type
  TTDCombat = record
    ActionHandlers: array[ETDCombatAction] of procedure() of object;

    Loadouts: array[0..1] of TRSCombatLoadout;
    ActiveLoadoutIndex: Integer;

    IsAttacking: Boolean;
  end;

procedure TTDCombat.DebugLn(text: String); begin
  WriteLn(GetTimeStamp + ':[TTDCombat]: ' + text);
end;

procedure TTDCombat.DebugLn(text: String; args: TVariantArray); overload; begin
  Self.DebugLn(Format(text, args));
end;

function TTDCombat.ActiveLoadout(): TRSCombatLoadout;
begin
  Result := Self.Loadouts[Self.ActiveLoadoutIndex];
end;

function TTDCombat.InactiveLoadout(): TRSCombatLoadout;
begin
    Result := Self.Loadouts[Self.ActiveLoadoutIndex xor 1];
end;

function TTDCombat.ShouldHeal(): Boolean;
var
  health: Integer; //placeholder
begin
  Result := ConsumableHandler.EatCoolDown.IsFinished
            and ConsumableHandler.DrinkCoolDown.IsFinished
            and (health < 60);
end;

function TTDCombat.ShouldBoost(): Boolean;
var
  boost: ERSConsumableType;
begin
  Result := (Length(Self.ActiveLoadout.Boost) <> 0);
  for boost in Self.ActiveLoadout.Boost do
    if not ConsumableHandler.ShouldBoost(boost) then
      Exit(False);
end;

function TTDCombat.ShouldRestorePrayer(): Boolean;
var
  prayerpoints: Integer; //placeholder
begin
  Result := ConsumableHandler.DrinkCoolDown.IsFinished and (prayerpoints < 20);
end;

function TTDCombat.ShouldChangePrayer(): Boolean;
var
  requiredPrayers, activePrayers: TRSPrayerSet;
begin
  activePrayers := GameState.GetPlayerActivePrayers;

  case GameState.GetTormentedDemonCombatStyle of
    ERSCombatStyle.MELEE: requiredPrayers += ERSPrayer.PROTECT_FROM_MELEE;
    ERSCombatStyle.RANGED: requiredPrayers += ERSPrayer.PROTECT_FROM_MISSILES;
    ERSCombatStyle.MAGIC: requiredPrayers += ERSPrayer.PROTECT_FROM_MAGIC;
    ERSCombatStyle.UNKNOWN:
      if [ERSPrayer.PROTECT_FROM_MAGIC, ERSPrayer.PROTECT_FROM_MISSILES] * activePrayers = TRSPrayerSet([]) then
        Exit(True);
  end;

  requiredPrayers += Self.ActiveLoadout.OffensivePrayers;
  Result := (requiredPrayers - GameState.GetPlayerActivePrayers) <> TRSPrayerSet([]);

  writeln('Required prayers: ', ToStr(requiredPrayers));
  writeln('Active prayers: ', ToStr(activePrayers));
  writeln('Missing prayers: ', ToStr(requiredPrayers - activePrayers));
end;

function TTDCombat.ShouldChangeGear(): Boolean;
begin
  if Self.ActiveLoadout.Style = GameState.GetTormentedDemonProtectedStyle then
    Exit(True);

  //TODO CALC DPS to decide whether or not to switch styles
end;

function TTDCombat.IsSnared(): Boolean;
begin
  Result := GameState.IsPlayerSnared;
end;

function TTDCombat.GetActions(): TTDCombatActionSet; begin
  if Self.ShouldHeal          then Result.Add([ETDCombatAction.HEAL,           ETDCombatAction.ATTACK]);
  if Self.ShouldBoost         then Result.Add([ETDCombatAction.CONSUME_BOOST,  ETDCombatAction.ATTACK]);
  if Self.ShouldRestorePrayer then Result.Add([ETDCombatAction.RESTORE_PRAYER, ETDCombatAction.ATTACK]);
  if Self.ShouldChangePrayer  then Result.Add([ETDCombatAction.SWAP_PRAYER]);
  if not Self.IsAttacking     then Result += ETDCombatAction.ATTACK;

  if Self.ShouldChangeGear then
    Result.Add([ETDCombatAction.OPEN_INVENTORY, ETDCombatAction.SWAP_GEAR, ETDCombatAction.ATTACK]);

  if Self.IsSnared then
    Result.Add([ETDCombatAction.DODGE_SNARE, ETDCombatAction.SWAP_PRAYER, ETDCombatAction.ATTACK]);
end;

procedure TTDCombat.Action_None();
begin

end;

procedure TTDCombat.Action_BeginFight();
var
  tdPosition: TPoint;
  hitsplatTimer: TCountdown;
  hitsplats: TRSHitSplatArray;
begin
  Self.DoAction(ETDCombatAction.ATTACK);

  //Confirm the results of ATTACK action
  if Self.IsAttacking then
  begin
    Self.DebugLn('Successfuly attacked in action BEGIN_FIGHT');
  end else
  begin
    Self.DebugLn('Failed to attack in action BEGIN_FIGHT');
    Exit;
  end;

  hitsplatTimer.Start(600*Ceil(GameState.GetPlayerPosition.DistanceTo(GameState.GetTormentedDemonPosition)/8));
  Self.DebugLn('Waiting %dms for hitsplat or earned xp', [hitsplatTimer.Remaining]);
  while hitsplatTimer.Remaining > 0 do
  begin
    if TRSHitsplat.Find(hitsplats, [GameState.GetTormentedDemonMSPoints.Bounds]) then
    begin
      Self.DebugLn('Found hitsplats');
      Break;
    end;

    if XPBar.EarnedXP then
    begin
      Self.DebugLn('XP earned.');
      Break;
    end;
    //async mouse to prayers?
  end;

  Self.DebugLn('Current distance from tormented demon: %f', [GameState.GetTormentedDemonPosition.DistanceTo(GameState.GetPlayerPosition)]);
  if GameState.GetTormentedDemonPosition.DistanceTo(GameState.GetPlayerPosition) <= 20 then
  begin
    Self.DebugLn('Tormented demon is too close, stepping away');
    Self.DoAction(ETDCombatAction.STEP_AWAY);
  end;

  tdPosition := GameState.GetTormentedDemonPosition;
  Self.DebugLn('Waiting for tormented demon movement to detect combat style. Current position: ' + ToStr(tdPosition));
  Sleep(1200);  //static wait??

  Self.DebugLn('tormented demon after wait: Position: ' + ToStr(GameState.GetTormentedDemonPosition) + '| Distance: %f', [GameState.GetTormentedDemonPosition.DistanceTo(GameState.GetPlayerPosition)]);

  if GameState.GetTormentedDemonPosition.DistanceTo(GameState.GetPlayerPosition)
    < tdPosition.DistanceTo(GameState.GetPlayerPosition) then
  begin
    Self.DebugLn('Detected melee combat style');
    GameState.SetTormentedDemonCombatStyle(ERSCombatStyle.MELEE);
  end else
  begin
    Self.DebugLn('Combat style unkown');
    GameState.SetTormentedDemonCombatStyle(ERSCombatStyle.UNKNOWN);
  end;
end;

procedure TTDCombat.Action_Attack();
var
  timeout: TCountDown;
begin
  if GameState.GetTormentedDemonMSPoints.Length < 1 then
    Exit;

  ASync.MouseMove(GameState.GetTormentedDemonMSPoints.Mean);
  timeout.Start(5000);
  //while mouse is moving to the center of tormented demon we check for proper uptext and upon
  //finding the uptext, we wait at a random range of 100ms to 2 seconds or when mouse movement is
  //done before checking again for proper uptext. What this does is allow us to move torward center
  //of the demon while randomly clicking on the demon on the way but at a random spot and time.
  while (timeout.Remaining > 0) and ASync.MouseMoving do
  begin
    if not MainScreen.IsUpText(['Attack', 'Tormented', 'Demon', '450']) then
      Continue;

    SleepUntil(not ASync.MouseMoving, 5, RandomLeft(10, 2000));

    if MainScreen.IsUpText(['Attack', 'Tormented', 'Demon', '450']) then
      Break;
  end;

  if ASync.MouseMoving then
    ASync.MouseStop;

  if not MainScreen.IsUpText(['Attack', 'Tormented', 'Demon', '450']) then
    Exit;

  Target.MouseClick(EMouseButton.LEFT);
  Self.IsAttacking := MainScreen.WaitRedClick;
end;

procedure TTDCombat.Action_StepAway();
var
  direction, destination: TPoint;
  magnitude, normDirX, normDirY: Double;
  attempt: Integer;
  rotation: Double;
  walkableMMPoints: TPointArray;
  tile: TQuad;
  walkTimer: TCountdown;
begin
  //find target coordinates used to search for a place to walk to. Target is calculated to be 3 tiles further away with the demon.
  direction := GameState.GetTormentedDemonPosition - GameState.GetPlayerPosition;
  magnitude := Sqrt(Sqr(direction.X) + Sqr(direction.Y));
  Self.DebugLn('Initial step-away direction: %s | Magnitude: %f', [ToStr(direction), magnitude]);

  if magnitude > 0 then
  begin
    normDirX := direction.X / magnitude;
    normDirY := direction.Y / magnitude;
  end;

  destination := Minimap.Center.Offset(-Round(normDirX * 16), -Round(normDirY * 16));
  Self.DebugLn('Calculated step-away destination: %s', [ToStr(destination)]);

  //Take 3 attempts to search the minimap for walkable colors in a 6x6 box centered around the calculated destination.
  //If no matches are found we will rotate the search area by +-30, edge weighted, around the tormented demons position.
  for attempt := 1 to 3 do
  begin
    walkableMMPoints := Target.FindColor($666B6C, 2.075, EColorSpace.RGB, [0.904, 1.104, 0.994], Box(destination, 4, 4));
    Self.DebugLn('Attempt %d: Found %d walkable MM points', [attempt, walkableMMPoints.Length]);

    if walkableMMPoints.Length >= 5 then
      Break;

    rotation := EdgeWeightedRandom(4, -30, 30);
    destination := destination.Rotate(rotation, GameState.GetTormentedDemonPosition);
    Self.DebugLn('Rotated destination by %.2f degrees around demon to %s', [rotation, ToStr(destination)]);
  end;

  //check if we ever found walkable colors
  if walkableMMPoints.Length < 5 then
  begin
    Self.DebugLn('STEP_AWAY failed: No suitable walkable MM points found after 3 attempts.');
    Exit;
  end;

  //grab random point from walkable points found and convert to mainscreen quad to click into
  destination := walkableMMPoints.Random;
  tile := Minimap.Point2MSQuad(destination, [1,1], Minimap.GetCompassAngle(True));
  Self.DebugLn('Chosen MM point: %s | Converted MS quad bounds: %s', [ToStr(destination), ToStr(tile.Bounds)]);

  Self.DebugLn('Clicking tile: %s', [ToStr(tile.Bounds)]);
  Mouse.Click(tile, EMouseButton.LEFT);

  if not MainScreen.WaitYellowClick(Random(125, 250)) then
  begin
    Self.DebugLn('Yellow click not detected — falling back to ChooseOption');
    if not ChooseOption.Select(['Walk', 'here']) then
    begin
      Self.DebugLn('ChooseOption.Select(["Walk", "here"]) failed — aborting STEP_AWAY');
      Exit;
    end;
  end;

  Self.IsAttacking := False;

  walkTimer.Start(Random(610, 700) * Ceil(destination.DistanceTo(Minimap.Center)/8));
  Self.DebugLn('Walk timer started for %d ms', [walkTimer.Remaining]);

  Sleep(Min(Random(200, 1000), walkTimer.Remaining));
  Self.DoAction(ETDCombatAction.OPEN_PRAYER);
  Sleep(walkTimer.Remaining);
end;


procedure TTDCombat.Action_SwapPrayer();
var
  activePrayers, requiredPrayers: TRSPrayerSet;
begin
  activePrayers := GameState.GetPlayerActivePrayers;

  case GameState.GetTormentedDemonCombatStyle of
    ERSCombatStyle.MELEE:  requiredPrayers += ERSPrayer.PROTECT_FROM_MELEE;
    ERSCombatStyle.RANGED: requiredPrayers += ERSPrayer.PROTECT_FROM_MISSILES;
    ERSCombatStyle.MAGIC:  requiredPrayers += ERSPrayer.PROTECT_FROM_MAGIC;
    ERSCombatStyle.UNKNOWN:
      if ERSPrayer.PROTECT_FROM_MAGIC in activePrayers then
        requiredPrayers += ERSPrayer.PROTECT_FROM_MAGIC
      else if ERSPrayer.PROTECT_FROM_MISSILES in activePrayers then
        requiredPrayers += ERSPrayer.PROTECT_FROM_MISSILES
      else if Random(2) = 0 then
        requiredPrayers += ERSPrayer.PROTECT_FROM_MAGIC
      else
        requiredPrayers += ERSPrayer.PROTECT_FROM_MISSILES;
  end;

  requiredPrayers += Self.ActiveLoadout.OffensivePrayers;

  Self.DebugLn('Currently active prayers: %s', [ToStr(activePrayers)]);
  Self.DebugLn('Required prayers to activate: %s', [ToStr(requiredPrayers)]);
  Self.DebugLn('Missing prayers to activate: %s', [ToStr(requiredPrayers - activePrayers)]);

  if Prayer.Activate(requiredPrayers - activePrayers) then
  begin
    Self.DebugLn('All prayers successfully activated');
    GameState.SetPlayerActivePrayers(requiredPrayers);
  end;
end;

procedure TTDCombat.Action_Heal();
begin
  ConsumableHandler.Consume(ERSConsumableType.FOOD);
end;

procedure TTDCombat.Action_ConsumeBoost();
var
  boost: ERSConsumableType;
begin
  for boost in Self.ActiveLoadout.Boost do
  begin
    if ConsumableHandler.ShouldBoost(boost) then
    begin
      ConsumableHandler.Consume(boost);
      Break;
    end;
  end;
end;

procedure TTDCombat.Action_RestorePrayer();
begin
  ConsumableHandler.Consume(ERSConsumableType.PRAYER_RESTORE);
end;

procedure TTDCombat.Action_SwapGear();
var
  gearToEquip: TRSItemArray;
  item: TRSItem;
  slots: TIntegerArray;
  slot: Integer;
begin
  gearToEquip := Self.InactiveLoadout.Gear;
  Self.DebugLn('Swapping gear. Target loadout index: %d', [Self.ActiveLoadoutIndex xor 1]);
  Self.DebugLn('Gear to equip: %s', [ToStr(gearToEquip)]);

  if not Inventory.IsOpen then
  begin
    Self.DebugLn('Canceling gear swap as inventory is closed.');
    Exit;
  end;

  Self.DebugLn('Searching inventory for gear');
  for item in gearToEquip do
  begin
    slot := GameState.GetInventoryItems.IndexOf(item);
    if slot < 0 then
      Continue;
    slots += slot;
    Self.DebugLn('Item: %s | Found at slot: %d', [ToStr(item), slot]);
  end;

  for slot in slots do
  begin
    if slot < 0 then
      Continue;

    Self.DebugLn('Clicking slot: %d to equip item.', [slot]);
    Inventory.Slots.Click(slot, EMouseButton.LEFT);
    Sleep(100, 300, ERandomDir.MEAN);
  end;

  Self.ActiveLoadoutIndex := Self.ActiveLoadoutIndex xor 1;
  Self.DebugLn('Gear swapped. New active loadout index: %d', [Self.ActiveLoadoutIndex]);
  Self.IsAttacking := False;
end;


procedure TTDCombat.Action_DodgeSnare();
begin

end;

procedure TTDCombat.Action_EndKill();
begin

end;

procedure TTDCombat.Action_OpenInventory();
begin
  Inventory.Open;
end;

procedure TTDCombat.Action_OpenPrayer();
begin
  Prayer.Open;
end;

procedure TTDCombat.Action_OpenMagic();
begin
  Magic.Open;
end;

procedure TTDCombat.DoAction(action: ETDCombatAction); begin
  Self.ActionHandlers[action]();
end;

function TTDCombat.ShouldContinueFighting: Boolean; begin
  Result := True;
end;

procedure TTDCombat.Fight();
var
  action: ETDCombatAction;
  actions: set of ETDCombatAction;
begin
  Self.DoAction(ETDCombatAction.BEGIN_FIGHT);

  while Self.ShouldContinueFighting do
  begin
    actions := Self.GetActions;
    if actions <> [] then
      Self.DebugLn('Selected actions: %s', [ToStr(actions)]);

    for action in actions do
      Self.DoAction(action);
  end;
end;


procedure TTDCombat.Init(loadouts: array[0..1] of TRSCombatLoadout); begin
  Self.ActionHandlers[ETDCombatAction.NONE          ] := @Self.Action_None;
  Self.ActionHandlers[ETDCombatAction.BEGIN_FIGHT   ] := @Self.Action_BeginFight;
  Self.ActionHandlers[ETDCombatAction.ATTACK        ] := @Self.Action_Attack;
  Self.ActionHandlers[ETDCombatAction.STEP_AWAY     ] := @Self.Action_StepAway;
  Self.ActionHandlers[ETDCombatAction.SWAP_PRAYER   ] := @Self.Action_SwapPrayer;
  Self.ActionHandlers[ETDCombatAction.HEAL          ] := @Self.Action_Heal;
  Self.ActionHandlers[ETDCombatAction.CONSUME_BOOST ] := @Self.Action_ConsumeBoost;
  Self.ActionHandlers[ETDCombatAction.RESTORE_PRAYER] := @Self.Action_RestorePrayer;
  Self.ActionHandlers[ETDCombatAction.SWAP_GEAR     ] := @Self.Action_SwapGear;
  Self.ActionHandlers[ETDCombatAction.DODGE_SNARE   ] := @Self.Action_DodgeSnare;
  Self.ActionHandlers[ETDCombatAction.END_KILL      ] := @Self.Action_EndKill;
  Self.ActionHandlers[ETDCombatAction.OPEN_INVENTORY] := @Self.Action_OpenInventory;
  Self.ActionHandlers[ETDCombatAction.OPEN_PRAYER   ] := @Self.Action_OpenPrayer;
  Self.ActionHandlers[ETDCombatAction.OPEN_MAGIC    ] := @Self.Action_OpenMagic;

  Self.Loadouts := loadouts;
end;

var
  TDCombat: TTDCombat;


